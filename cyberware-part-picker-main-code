#Here's an example Python program that uses the Tkinter library to create a graphical user interface that displays a model of a human body.
#The user can select between male and female gender, and then select a body part by clicking on the corresponding image. 
#When a body part is clicked, a list of available websites are shown as images that the user can click on to open them in a web browser.
#Define a function to display the model of a human based on the selected gender. 
#This could be done using a library such as Pygame or Tkinter to create a graphical interface with images of a male or female body.
#Define a dictionary or other data structure to store the available websites for each body part.
#For example, you could have a key for each body part (e.g., "head", "torso", "arms", "legs"), with a list of URLs for the available websites as the value.
#Define a function to handle user input when a body part is clicked.
#This function should take the name of the body part as a parameter, look up the corresponding list of websites in the dictionary,
#and display the list of websites to the user.
#Here's a rough outline of the code:



import tkinter as tk
import webbrowser

# Define the available websites for each body part
websites = {
    "Head": ["https://www.google.com", "https://www.yahoo.com"],
    "Torso": ["https://www.cnn.com", "https://www.bbc.com"],
    "Arms": ["https://www.nytimes.com", "https://www.theguardian.com"],
    "Legs": ["https://www.washingtonpost.com", "https://www.reuters.com"]
}

# Define the function to handle clicks on body parts
def handle_click(body_part):
    # Clear any previously displayed websites
    for widget in website_frame.winfo_children():
        widget.destroy()
    
    # Display the available websites for the clicked body part
    for i, website in enumerate(websites[body_part]):
        # Load the website image and create a clickable label
        img = tk.PhotoImage(file="website.png")
        label = tk.Label(website_frame, image=img, cursor="hand2")
        label.image = img
        label.grid(row=i, column=0, padx=5, pady=5)
        
        # Add a click event handler to open the website in a web browser
        def callback(url):
            webbrowser.open_new(url)
        label.bind("<Button-1>", lambda e, url=website: callback(url))

# Define the function to display the model of a human
def display_human(gender):
    # Load the male or female body image
    if gender == "Male":
        img = tk.PhotoImage(file="male_body.png")
    else:
        img = tk.PhotoImage(file="female_body.png")
    
    # Create a label for the body image
    body_label = tk.Label(image=img)
    body_label.image = img
    body_label.pack(side="top")
    
    # Create a button for each body part
    button_frame = tk.Frame(root)
    button_frame.pack(side="top")
    
    for body_part in websites.keys():
        # Load the body part image and create a clickable button
        img = tk.PhotoImage(file=f"{body_part.lower()}.png")
        button = tk.Button(button_frame, image=img, command=lambda bp=body_part: handle_click(bp))
        button.image = img
        button.pack(side="left", padx=5, pady=5)
    
    # Create a frame for displaying the websites
    global website_frame
    website_frame = tk.Frame(root)
    website_frame.pack(side="top")

# Create the main window
root = tk.Tk()
root.title("Human Body Model")

# Create the gender selection frame
gender_frame = tk.Frame(root)
gender_frame.pack(side="top")

male_button = tk.Button(gender_frame, text="Male", command=lambda: display_human("Male"))
male_button.pack(side="left", padx=5, pady=5)

female_button = tk.Button(gender_frame, text="Female", command=lambda: display_human("Female"))
female_button.pack(side="left", padx=5, pady=5)

# Start the main event loop
root.mainloop()
